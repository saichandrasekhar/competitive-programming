#include <bits/stdc++.h>

using namespace std;

#define DEBUG

const long long INF = 0x3f3f3f3f3f3f3f3fLL;
const int MOD = 1e9 + 7;

//mt19937 rng(chrono::steady_clock::now().time_since_epoch().count());

template<typename T>
ostream &operator<<(ostream &os, const vector<T> &v) {
    os << '{';
    string sep;
    for (const auto &x : v) os << sep << x, sep = ", ";
    return os << '}';
}

template<typename T, size_t size>
ostream &operator<<(ostream &os, const array<T, size> &arr) {
    os << '{';
    string sep;
    for (const auto &x : arr) os << sep << x, sep = ", ";
    return os << '}';
}

template<typename A, typename B>
ostream &operator<<(ostream &os, const pair<A, B> &p) { return os << '(' << p.first << ", " << p.second << ')'; }

void dbg_out() { cerr << endl; }

template<typename Head, typename... Tail>
void dbg_out(Head H, Tail... T) {
    cerr << ' ' << H;
    dbg_out(T...);
}

#ifdef DEBUG
#define dbg(...) cerr << "(" << #__VA_ARGS__ << "):", dbg_out(__VA_ARGS__)
#else
#define dbg(...)
#endif

const int N = 30010;
const int M = 200010;

int a[N], n, q, T[4 * N];

void build(int v, int l, int r) {
    if (l == r) {
        T[v] = 1;
    } else {
        int m = (l + r) / 2;
        build(v * 2, l, m);
        build(v * 2 + 1, m + 1, r);
        T[v] = T[v * 2] + T[v * 2 + 1];
    }
}

void update(int v, int idx, int l, int r) {
    if (l == r) {
        T[v] = 0;
    } else {
        int m = (l + r) / 2;
        if (idx <= m) update(v * 2, idx, l, m);
        else update(v * 2 + 1, idx, m + 1, r);
        T[v] = T[v * 2] + T[v * 2 + 1];
    }
}

int query(int v, int l, int r, int x, int y) {
    if (l > y || r < x) return 0;
    if (l >= x && r <= y) return T[v];
    int m = (l + r) / 2;
    return query(v * 2, l, m, x, y) + query(v * 2 + 1, m + 1, r, x, y);
}

int main() {
    ios::sync_with_stdio(false);
    cin.tie(nullptr);

    cin >> n;
    vector<int> pos(n);
    for (int i = 0; i < n; i++) {
        cin >> a[i];
        pos[i] = i;
    }
    sort(pos.begin(), pos.end(), [&](int i, int j) {
        return a[i] < a[j];
    });
    build(1, 0, n - 1);
    cin >> q;
    vector<array<int, 4>> Q(q);
    for (int i = 0; i < q; i++) {
        cin >> Q[i][1] >> Q[i][2] >> Q[i][0];
        Q[i][3] = i;
    }
    sort(Q.begin(), Q.end(), [&](auto x, auto y) {
        return x[0] < y[0];
    });
    vector<int> ans(q);
    for (int i = 0, j = 0; i < q; i++) {
        int k = Q[i][0], l = Q[i][1] - 1, r = Q[i][2] - 1, idx = Q[i][3];
        while (j < n && a[pos[j]] <= k) {
            update(1, pos[j], 0, n - 1);
            j++;
        }
        ans[idx] = query(1, 0, n - 1, l, r);
    }
    for (int &i: ans) {
        cout << i << '\n';
    }
}
